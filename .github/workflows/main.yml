name: Main

on:
  push:
    tags: ["v[0-9].[0-9]+.[0-9]+"]
    branches:
      - "development"
      - "staging"
      - "main"

env:
  ## AWS secrets
  TF_VAR_AWS_REGION: "\"${{ secrets.AWS_REGION }}\""
  TF_VAR_AWS_ACCESS_KEY_ID: "\"${{ secrets.AWS_ACCESS_KEY_ID }}\""
  TF_VAR_AWS_SECRET_ACCESS_KEY: "\"${{ secrets.AWS_SECRET_ACCESS_KEY }}\""

  ## HCP secrets
  TF_VAR_HCP_CLIENT_ID: "\"${{ secrets.HCP_CLIENT_ID }}\""
  TF_VAR_HCP_CLIENT_SECRET: "\"${{ secrets.HCP_CLIENT_SECRET }}\""
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
  HCP_PROJECT_ID: ${{ secrets.HCP_PROJECT_ID }}
  HCP_ORGANIZATION_ID: ${{ secrets.HCP_ORGANIZATION_ID }}
  
  ## Terraform vars/secrets..
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
  TF_ORG_API_TOKEN: '${{ secrets.TF_ORG_API_TOKEN }}'

  ## VAULT secrets
  TF_VAR_VAULT_TOKEN: "\"${{ secrets.VAULT_TOKEN }}\""
  TF_VAR_VAULT_ADDR: "\"${{ secrets.VAULT_ADDR }}\""

jobs:
  terraform-workspace-setup:
    name: "Terraform workspace setup"
    runs-on: ubuntu-latest
    outputs:
      TF_SSH_SETUP_WORKSPACE: ${{ steps.setup-names.outputs.TF_SSH_SETUP_WORKSPACE }}
      TF_BOUNDARY_SETUP_WORKSPACE: ${{ steps.setup-names.outputs.TF_BOUNDARY_SETUP_WORKSPACE }}
      TF_INFRA_SETUP_WORKSPACE: ${{ steps.setup-names.outputs.TF_INFRA_SETUP_WORKSPACE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: "set workspace names"
        working-directory: .github/scripts
        id: setup-names
        run: |
          TF_SSH_SETUP_WORKSPACE=$( echo ${{ github.repository }} | sed 's/.*\///')_SSH_CA
          TF_BOUNDARY_SETUP_WORKSPACE=$( echo ${{ github.repository }} | sed 's/.*\///')_BOUNDARY
          TF_INFRA_SETUP_WORKSPACE=$( echo ${{ github.repository }} | sed 's/.*\///')_INFRA
          echo "TF_SSH_SETUP_WORKSPACE=$TF_SSH_SETUP_WORKSPACE" >> $GITHUB_OUTPUT
          echo "TF_BOUNDARY_SETUP_WORKSPACE=$TF_BOUNDARY_SETUP_WORKSPACE" >> $GITHUB_OUTPUT
          echo "TF_INFRA_SETUP_WORKSPACE=$TF_INFRA_SETUP_WORKSPACE" >> $GITHUB_OUTPUT
          BRANCH=$( echo ${{ github.ref_name }} | sed 's/\./-/g')
          ./create_TFC_workspaces.sh ${{ env.TF_ORG_API_TOKEN }} ${{ env.TF_CLOUD_ORGANIZATION }} ${{ github.repository }} $BRANCH $TF_SSH_SETUP_WORKSPACE $TF_BOUNDARY_SETUP_WORKSPACE $TF_INFRA_SETUP_WORKSPACE
  terraform-ssh-conf-apply:
    name: "Terraform Apply setup SSH ca"
    runs-on: ubuntu-latest
    needs: ["terraform-workspace-setup"]
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.2.0
        id: apply-upload
        with:
          workspace: ${{ needs.terraform-workspace-setup.outputs.TF_SSH_SETUP_WORKSPACE }}
          directory: ./terraform/ssh_setup/
          token: ${{ env.TF_API_TOKEN }}
          organization: ${{ env.TF_CLOUD_ORGANIZATION }}
      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.2.0
        id: apply-run
        with:
          workspace: ${{ needs.terraform-workspace-setup.outputs.TF_SSH_SETUP_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.2.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"
        env:
          TF_LOG: DEBUG

  setup-packer-bucket:
    name: Packer setup
    runs-on: ubuntu-latest
    outputs:
      TF_VAR_HCP_BUCKET_NAME: ${{ steps.bucket-conf.outputs.TF_VAR_HCP_BUCKET_NAME}}
      TF_VAR_HCP_CHANNEL_NAME: ${{ steps.bucket-conf.outputs.TF_VAR_HCP_CHANNEL_NAME }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Create Bucket
        working-directory: .github/scripts
        id: bucket-conf
        run: |
          HCP_BUCKET_NAME=$( echo ${{ github.repository }} | sed 's/.*\///')
          HCP_CHANNEL_NAME=$( echo ${{ github.ref_name }} | sed 's/\./-/g')
          ./create_Packer_bucket.sh $HCP_BUCKET_NAME $HCP_CHANNEL_NAME
          echo "TF_VAR_HCP_BUCKET_NAME=$HCP_BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "TF_VAR_HCP_CHANNEL_NAME=$HCP_CHANNEL_NAME" >> $GITHUB_OUTPUT
  build-image:
    name: Build
    needs: ["terraform-ssh-conf-apply", "setup-packer-bucket"]
    outputs:
      TF_VAR_VERSIONFINGERPRINT: ${{ steps.hcp.outputs.VERSIONFINGERPRINT }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Import SSH private key from Vault
        uses: hashicorp/vault-action@v3
        id: vault-ca
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: token
          token: ${{ secrets.VAULT_TOKEN }}
          namespace: admin
          secrets: |
            kvv2/data/secret public_key | TRUSTED_CA
      - name: Packer Init
        run: packer init .
      - name: Packer Build
        run: packer build -var="TRUSTED_CA='${{ steps.vault-ca.outputs.TRUSTED_CA }}'" -var="HCP_BUCKET=${{ needs.setup-packer-bucket.outputs.TF_VAR_HCP_BUCKET_NAME }}" aws-ubuntu-template.pkr.hcl
      - name: Get HCP Packer version from Packer Manifest
        id: hcp
        run: |
          last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
          build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
          VERSIONFINGERPRINT=$(echo "$build" | jq -r '.custom_data.versionFingerprint')
          echo "VERSIONFINGERPRINT=$VERSIONFINGERPRINT" >> $GITHUB_OUTPUT
  set-channel-version:
    name: channel version config
    runs-on: ubuntu-latest
    needs: ["build-image", "setup-packer-bucket"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set Channel Version
        working-directory: .github/scripts
        id: channel-conf
        run: |
          ./update_channel_version.sh ${{ needs.setup-packer-bucket.outputs.TF_VAR_HCP_BUCKET_NAME }} ${{ needs.setup-packer-bucket.outputs.TF_VAR_HCP_CHANNEL_NAME }} ${{ needs.build-image.outputs.TF_VAR_VERSIONFINGERPRINT }}
  terraform-boundary-setup:
    name: "Terraform setup Boundary credential libaries and users"
    needs: ["terraform-ssh-conf-apply", "terraform-workspace-setup"]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.2.0
        id: apply-upload
        with:
          workspace: ${{ needs.terraform-workspace-setup.outputs.TF_BOUNDARY_SETUP_WORKSPACE }}
          directory: ./terraform/boundary_setup/
          token: ${{ env.TF_API_TOKEN }}
          organization: ${{ env.TF_CLOUD_ORGANIZATION }}
      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.2.0
        id: apply-run
        with:
          workspace: ${{ needs.terraform-workspace-setup.outputs.TF_BOUNDARY_SETUP_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
        env:
          TF_VAR_BOUNDARY_ADDR: "\"${{ secrets.BOUNDARY_ADDR }}\""
          TF_VAR_BOUNDARY_USER: "\"${{ secrets.BOUNDARY_USER }}\""
          TF_VAR_BOUNDARY_PASS: "\"${{ secrets.BOUNDARY_PASS }}\""
          TF_VAR_VAULT_TOKEN: "\"${{ secrets.VAULT_TOKEN }}\""
          TF_VAR_VAULT_ADDR: "\"${{ secrets.VAULT_ADDR }}\""  
          TF_VAR_AWS_REGION: "\"${{ secrets.AWS_REGION }}\""
          TF_VAR_AWS_ACCESS_KEY_ID: "\"${{ secrets.AWS_ACCESS_KEY_ID }}\""
          TF_VAR_AWS_SECRET_ACCESS_KEY: "\"${{ secrets.AWS_SECRET_ACCESS_KEY }}\""
          TF_LOG: DEBUG
      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.2.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"
  terraform-setup-test-servers:
    name: "Terraform setup some AWS test servers to connect to"
    needs: [ "setup-packer-bucket", "set-channel-version", "build-image", "terraform-workspace-setup" ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.2.0
        id: apply-upload
        with:
          workspace: ${{ needs.terraform-workspace-setup.outputs.TF_INFRA_SETUP_WORKSPACE }}
          directory: ./terraform/infra_setup/
          token: ${{ env.TF_API_TOKEN }}
          organization: ${{ env.TF_CLOUD_ORGANIZATION }}
      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.2.0
        id: apply-run
        with:
          workspace: ${{ needs.terraform-workspace-setup.outputs.TF_INFRA_SETUP_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
        env:
          TF_VAR_AWS_REGION: "\"${{ secrets.AWS_REGION }}\""
          TF_VAR_AWS_ACCESS_KEY_ID: "\"${{ secrets.AWS_ACCESS_KEY_ID }}\""
          TF_VAR_AWS_SECRET_ACCESS_KEY: "\"${{ secrets.AWS_SECRET_ACCESS_KEY }}\""
          TF_VAR_HCP_CHANNEL_NAME: "\"${{ needs.setup-packer-bucket.outputs.TF_VAR_HCP_CHANNEL_NAME }}\""
          TF_VAR_HCP_BUCKET_NAME: "\"${{ needs.setup-packer-bucket.outputs.TF_VAR_HCP_BUCKET_NAME }}\""
          TF_VAR_HCP_VERSIONFINGERPRINT: "\"${{ needs.build-image.outputs.TF_VAR_VERSIONFINGERPRINT }}\""
          TF_LOG: DEBUG
      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.2.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"